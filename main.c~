/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 29/01/2020
Author  : 
Company : 
Comments: 


Chip type               : ATmega32A
Program type            : Application
AVR Core Clock frequency: 12,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32a.h>

#include <delay.h>

// Alphanumeric LCD functions
#include <alcd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define latch0 PORTB.1=0;
#define latch1 PORTB.1=1;
#define data0 PORTB.2=1;
#define data1 PORTB.2=0;
#define clk0 PORTB.0=0;
#define clk1 PORTB.0=1;

unsigned char angka[10][8]={
                       {0b11000111,
                        0b10111011,
                        0b10110011,
                        0b10101011,
                        0b10011011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b11101111,
                        0b11001111,
                        0b11101111,
                        0b11101111,
                        0b11101111,
                        0b11101111,
                        0b11000111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b11111011,
                        0b11110111,
                        0b11101111,
                        0b11011111,
                        0b10000011,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b11111011,
                        0b11100111,
                        0b11111011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b11110111,
                        0b11101111,
                        0b11011011,
                        0b10111011,
                        0b10000011,
                        0b11111011,
                        0b11111011,
                        0b11111111},
                        
                       {0b10000011,
                        0b10111111,
                        0b10000111,
                        0b11111011,
                        0b11111011,
                        0b11111011,
                        0b10000111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b10111111,
                        0b10000111,
                        0b10111011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b10000011,
                        0b11111011,
                        0b11110111,
                        0b11101111,
                        0b11011111,
                        0b10111111,
                        0b10111111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b10111011,
                        0b10000011,
                        0b10111011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b10111011,
                        0b11000011,
                        0b11111011,
                        0b10111011,
                        0b11000111,
                        0b11111111}};

unsigned char fase[7][8]={
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00000111,
                        0b01111111,
                        0b01111111,
                        0b00001111,
                        0b01111111,
                        0b01111111,
                        0b01111111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b01110111,
                        0b00000111,
                        0b01110111,
                        0b01110111,
                        0b01110111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b01111111,
                        0b10001111,
                        0b11110111,
                        0b01110111,
                        0b10001111,
                        0b11111111},
                        
                       {0b00000111,
                        0b01111111,
                        0b01111111,
                        0b00001111,
                        0b01111111,
                        0b01111111,
                        0b00000111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b11110111,
                        0b11101111,
                        0b11011111,
                        0b10111111,
                        0b00000111,
                        0b11111111},
                        
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111}};

unsigned char smk[12][8]={
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b01111111,
                        0b10001111,
                        0b11110111,
                        0b01110111,
                        0b10001111,
                        0b11111111},
                        
                       {0b01110111,
                        0b00100111,
                        0b01010111,
                        0b01110111,
                        0b01110111,
                        0b01110111,
                        0b01110111,
                        0b11111111},
                        
                       {0b01110111,
                        0b01101111,
                        0b01011111,
                        0b00111111,
                        0b01011111,
                        0b01101111,
                        0b01110111,
                        0b11111111},
                        
                       {0b00001111,
                        0b01110111,
                        0b01110111,
                        0b00001111,
                        0b01110111,
                        0b01110111,
                        0b00001111,
                        0b11111111},
                        
                       {0b00011111,
                        0b10111111,
                        0b10111111,
                        0b10111111,
                        0b10111111,
                        0b10111111,
                        0b00011111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b01111111,
                        0b10001111,
                        0b11110111,
                        0b01110111,
                        0b10001111,
                        0b11111111},
                        
                       {0b10001111,
                        0b01110111,
                        0b01110111,
                        0b00000111,
                        0b01110111,
                        0b01110111,
                        0b01110111,
                        0b11111111},
                        
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b00000111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b10110011,
                        0b10101011,
                        0b10011011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b11000111,
                        0b10111011,
                        0b10111011,
                        0b10000011,
                        0b10111011,
                        0b10111011,
                        0b11000111,
                        0b11111111},
                        
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111}};

unsigned char puluhan[10][8]={
                       {0b00011111,
                        0b01011111,
                        0b01011111,
                        0b01011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b10111111,
                        0b00111111,
                        0b10111111,
                        0b10111111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b11011111,
                        0b00011111,
                        0b01111111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b11011111,
                        0b00011111,
                        0b11011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b01011111,
                        0b01011111,
                        0b00011111,
                        0b11011111,
                        0b11011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b01111111,
                        0b00011111,
                        0b11011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b01111111,
                        0b00011111,
                        0b01011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b11011111,
                        0b11011111,
                        0b11011111,
                        0b11011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b01011111,
                        0b00011111,
                        0b01011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b00011111,
                        0b01011111,
                        0b00011111,
                        0b11011111,
                        0b00011111,
                        0b11111111,
                        0b11111111,
                        0b11111111}};
                        
unsigned char satuan[10][8]={
                       {0b11110001,
                        0b11110101,
                        0b11110101,
                        0b11110101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11111011,
                        0b11110011,
                        0b11111011,
                        0b11111011,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11111101,
                        0b11110001,
                        0b11110111,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11111101,
                        0b11110001,
                        0b11111101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110101,
                        0b11110101,
                        0b11110001,
                        0b11111101,
                        0b11111101,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11110111,
                        0b11110001,
                        0b11111101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11110111,
                        0b11110001,
                        0b11110101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11111101,
                        0b11111101,
                        0b11111101,
                        0b11111101,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11110101,
                        0b11110001,
                        0b11110101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                        
                       {0b11110001,
                        0b11110101,
                        0b11110001,
                        0b11111101,
                        0b11110001,
                        0b11111111,
                        0b11111111,
                        0b11111111}};

unsigned char arah[5][8]={
                       {0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111,
                        0b11111111},
                       
                       {0b11100111,
                        0b11000011,
                        0b10000001,
                        0b00000000,
                        0b11000011,
                        0b11000011,
                        0b11000011,
                        0b11000011},                        
                       
                       {0b11101111,
                        0b11001111,
                        0b10000000,
                        0b00000000,
                        0b00000000,
                        0b10000000,
                        0b11001111,
                        0b11101111},
                        
                       {0b11110111,
                        0b11110011,
                        0b00000001,
                        0b00000000,
                        0b00000000,
                        0b00000001,
                        0b11110011,
                        0b11110111},
                        
                       {0b11000011,
                        0b11000011,
                        0b11000011,
                        0b11000011,
                        0b00000000,
                        0b10000001,
                        0b11000011,
                        0b11100111}};


// Declare your global variables here

unsigned int read_adc(unsigned char adc_input);
int sen,pot,pb,vrx,vry;
int suhu,jx,jy,joy,menu,level,push,lastc7,latchmenu,resbit,lvlpul,lvlsat,bawah,atas,tengah;
int i;
int j;
int p;
float vADC,temp;
int menu=0;
char datalcd[16];
unsigned char bitresult[8];

void bitwise(int x)
{
  int pul,sat,k;
  pul=x/10;
  sat=x%10;  
  for(k=0;k<8;k++)
  {
    bitresult[k]=puluhan[pul][k]&satuan[sat][k];
  }   
}

void matrix(unsigned char input_data[8])
{
  unsigned int nilai_t16;
  for(i=0;i<8;i++)
  {
    nilai_t16=(0x01<<(15-i)) + input_data[i];
    latch0;
    for(j=0;j<=15;j++)
    {
      if((nilai_t16) & (0x01 << j))
      {data1;}
      else
      {data0;}
      clk1;
      delay_us(10);
      clk0;
      delay_us(10);
    }
    latch1;
  }  
}

void scrollmtx(unsigned int datalength, unsigned char data[datalength][8])
{
    int kl,lm,mn;
    unsigned char buff_geser[8];
    
    for(kl=0;kl<(datalength-1)*8;kl++)
    {
      for(lm=0;lm<8;lm++)
      {
        buff_geser[lm]=data[kl/8][lm]<<(kl%8) | (data[kl/8+1][lm] >>(8-(kl%8)));
      }
        
      for(mn=0;mn<5;mn++)
      {
        matrix(buff_geser);
      }        
    }
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Reinitialize Timer 0 value
TCNT0=0x44;
// Place your code here
    delay_us(100);
    pot=read_adc(4);
    delay_us(100);
    pb=read_adc(5);
    delay_us(100);
    vrx=read_adc(6);
    delay_us(100);
    vry=read_adc(7);
    
    if(vrx>300 && vrx<700){jx=0;}
    else if(vrx>700){jx=1;}
    else if(vrx<300){jx=2;}
    
    if(vry>300 && vry<700){jy=0;}
    else if(vry>700){jy=1;}
    else if(jy<300){jy=2;}
    
    if(jx==1 && jy==0){joy=1;}
    else if(jx==0 && jy==2){joy=2;}
    else if(jx==0 && jy==1){joy=3;}
    else if(jx==2 && jy==0){joy=4;}
    else if(jx==0 && jy==0){joy=0;}
    
    if(joy==1){menu=1;}
    else if(joy==2){menu=2;}
    else if(joy==3){menu=3;}
    else if(joy==4){menu=4;}
    
    if(pb<100){push=1;}
    else if(pb>100 && pb<400){push=2;}
    else if(pb>400 && pb<700){push=3;}
    else if(pb>700 && pb<1000){push=4;}
    else if(pb>1000){push=0;}
    
    if(PINC.7==0 && lastc7==1)
        {
          if(latchmenu==1){latchmenu=0;}
          else{latchmenu=1;}
        }
        lastc7=PINC.7;
        
    if(latchmenu==0)
        {
          
        }
        else if(latchmenu==1)
        {
          if(menu==1)
          { 
            if(push==1)
            {
              p++;
              if(p==1){lvlpul++;if(lvlpul>0){lvlpul=0;}}
              else if(p==50){p=0;}
            }
            else if(push==2)
            {
              p++;
              if(p==1){lvlsat++;if(lvlsat>0){lvlsat=0;}}
              else if(p==50){p=0;}
            }
            else if(push==3){bawah=0;}
            else if(push==4){bawah=99;}
            bawah=(lvlpul*10)+lvlsat;
          }
          else if(menu==2)
          {
            tengah=(pot/10);
          }
          else if(menu==3)
          { 
            lvlpul=0;lvlsat=0;
            if(push==1)
            {
              p++;
              if(p==1){lvlpul++;if(lvlpul>9){lvlpul=0;}}
              else if(p==50){p=0;}
            }
            else if(push==2)
            {
              p++;
              if(p==1){lvlsat++;if(lvlsat>9){lvlsat=0;}}
              else if(p==50){p=0;}
            }
            else if(push==3){tengah=0;}
            else if(push==4){tengah=99;}
            atas=(lvlpul*10)+lvlsat;
          }
          else if(menu==4)
          {
            
          }
        }
}

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
// Reinitialize Timer1 value
TCNT1H=0xCC70 >> 8;
TCNT1L=0xCC70 & 0xff;
// Place your code here
    delay_us(100);
    sen=read_adc(3);
    
    vADC=(sen/1023.00)*5.00;
    temp=vADC/0.01;
    suhu=((int)temp)*1;
}

// Voltage Reference: AVCC pin
#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input | ADC_VREF_TYPE;
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=(1<<ADSC);
// Wait for the AD conversion to complete
while ((ADCSRA & (1<<ADIF))==0);
ADCSRA|=(1<<ADIF);
return ADCW;
}

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(1<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 187,500 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 1,0027 ms
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
TCNT0=0x44;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 12000,000 kHz
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 1,1 ms
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
TCNT1H=0xCC;
TCNT1L=0x70;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);

// ADC initialization
// ADC Clock frequency: 750,000 kHz
// ADC Voltage Reference: AVCC pin
// ADC Auto Trigger Source: ADC Stopped
ADMUX=ADC_VREF_TYPE;
ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTD Bit 1
// RD - PORTD Bit 0
// EN - PORTD Bit 2
// D4 - PORTD Bit 3
// D5 - PORTD Bit 4
// D6 - PORTD Bit 5
// D7 - PORTD Bit 6
// Characters/line: 16
lcd_init(16);

// Global enable interrupts
#asm("sei")

lcd_gotoxy(0,0);
sprintf(datalcd,"ESP FASE 3");
lcd_puts(datalcd);
lcd_gotoxy(0,1);
sprintf(datalcd,"LKS KE-28/2020");
lcd_puts(datalcd);

PORTD.7=1;
delay_ms(50);
PORTD.7=0;
delay_ms(50);
PORTD.7=1;
delay_ms(50);
PORTD.7=0;

scrollmtx(12,smk);

while (1)
      {
      // Place your code here
        if(latchmenu==0)
        {        
          if(menu==1)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"BATAS BAWAH     ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"%2d              ",bawah);
            lcd_puts(datalcd);
            matrix(angka[1]);
          }
          if(menu==2)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"BATAS TENGAH   ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"%2d             ",tengah);
            lcd_puts(datalcd);
            matrix(angka[2]);
          }
          if(menu==3)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"BATAS ATAS      ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"%2d              ",atas);
            lcd_puts(datalcd);
            matrix(angka[3]);
          }
          if(menu==4)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"KOMPARATOR      ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"TEMP:%.2f'C  ",temp);
            lcd_puts(datalcd);
            matrix(angka[4]);
          }
        }
        else if(latchmenu==1)
        {
          if(menu==1)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"BATAS BAWAH     ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"TEKAN S1 s/d S4 ");
            lcd_puts(datalcd);
            bitwise(bawah);
            matrix(bitresult);
          }
          else if(menu==2)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"NILAI TENGAH    ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"PUTAR POTENSIO  ");
            lcd_puts(datalcd);
            bitwise(tengah);
            matrix(bitresult);
          }
          else if(menu==3)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"NILAI ATAS      ");
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"TEKAN S1 s/d S4 ");
            lcd_puts(datalcd);
            bitwise(atas);
            matrix(bitresult);
          }
          else if(menu==4)
          {
            lcd_gotoxy(0,0);
            sprintf(datalcd,"%2d %2d %2d      ",bawah,tengah,atas);
            lcd_puts(datalcd);
            lcd_gotoxy(0,1);
            sprintf(datalcd,"TEMP:%.2f'C",temp);
            lcd_puts(datalcd);
            if(temp<bawah){matrix(arah[4]);}
            else if(temp>bawah && temp<tengah){matrix(arah[2]);}
            else if(temp>tengah && temp<atas){matrix(arah[3]);}
            else if(temp>atas){matrix(arah[1]);}
          }
        }
        
//        lcd_gotoxy(0,0);
//        sprintf(datalcd,"x=%4d y=%4d",vrx,vry);
//        lcd_puts(datalcd);
//        
//        if(menu==0)
//        {
//          lcd_gotoxy(0,0);
//          sprintf(datalcd,"MENU PROGRAM   ");
//          lcd_puts(datalcd);
//          lcd_gotoxy(0,1);
//          sprintf(datalcd,"TEKAN S1 s/d S3");
//          lcd_puts(datalcd);
//        }
//        else if(menu==1)
//        {
//          lcd_gotoxy(0,0);
//          sprintf(datalcd,"SUHU= %.2f'C",temp);
//          lcd_puts(datalcd);
//          lcd_gotoxy(0,1);
//          sprintf(datalcd,"S4 KE MENU     ");
//          lcd_puts(datalcd);
//        }
//        else if(menu==2)
//        {
//          lcd_gotoxy(0,0);
//          sprintf(datalcd,"ADC POT= %4d",pot);
//          lcd_puts(datalcd);
//          lcd_gotoxy(0,1);
//          sprintf(datalcd,"S4 KE MENU     ");
//          lcd_puts(datalcd);
//        }
//        else if(menu==3)
//        {
//          lcd_gotoxy(0,0);
//          sprintf(datalcd,"X=%4d Y=%4d",vrx,vry);
//          lcd_puts(datalcd);
//          lcd_gotoxy(0,1);
//          sprintf(datalcd,"S4 KE MENU     ");
//          lcd_puts(datalcd);
//        }
//        matrix(angka[menu]);       
      }
}
